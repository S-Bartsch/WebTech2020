import { ChangeDetectorRef, Component, ElementRef, Inject, Input, } from '@angular/core';
import { Icons } from '../../providers/icon.provider';
/**
 * Bootstrap icon component.
 */
export class NgxBootstrapIconsLibComponent {
    constructor(_elem, _changeDetector, _icons) {
        this._elem = _elem;
        this._changeDetector = _changeDetector;
        this._icons = _icons;
    }
    /**
     * OnChanges event.
     *
     * @param changes
     */
    ngOnChanges(changes) {
        // eslint-disable-next-line global-require
        const camelcase = require('camelcase');
        // icons are provided as an array of objects because of "multi: true"
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const icons = Object.assign({}, ...this._icons);
        let svg = icons[camelcase(changes.name.currentValue)] || '';
        if (!svg)
            console.warn(`Icon not found: ${changes.name.currentValue}\n`);
        if (this.width && svg.includes('width'))
            svg = svg.replace('width="16"', `width="${this.width}"`);
        if (this.height && svg.includes('height'))
            svg = svg.replace('height="16"', `height="${this.height}"`);
        this._elem.nativeElement.innerHTML = svg;
        this._changeDetector.markForCheck();
    }
}
NgxBootstrapIconsLibComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'i-bs',
                template: '<ng-content></ng-content>'
            },] }
];
NgxBootstrapIconsLibComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
];
NgxBootstrapIconsLibComponent.propDecorators = {
    name: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJvb3RzdHJhcC1pY29ucy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vcHJvamVjdHMvbmd4LWJvb3RzdHJhcC1pY29ucy1saWIvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmd4LWJvb3RzdHJhcC1pY29ucy9uZ3gtYm9vdHN0cmFwLWljb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04saUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxHQUN2RCxNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFdEQ7O0dBRUc7QUFNSCxNQUFNLE9BQU8sNkJBQTZCO0lBVXpDLFlBQ1MsS0FBaUIsRUFDakIsZUFBa0MsRUFFbEMsTUFBYTtRQUhiLFVBQUssR0FBTCxLQUFLLENBQVk7UUFDakIsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBRWxDLFdBQU0sR0FBTixNQUFNLENBQU87SUFDbEIsQ0FBQztJQUVMOzs7O09BSUc7SUFDSSxXQUFXLENBQUMsT0FBc0I7UUFDeEMsMENBQTBDO1FBQzFDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2QyxxRUFBcUU7UUFDckUsOERBQThEO1FBQzlELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUksSUFBSSxDQUFDLE1BQTBCLENBQUMsQ0FBQztRQUNyRSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFNUQsSUFBSSxDQUFDLEdBQUc7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUM7UUFDekUsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFVBQVUsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDbEcsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFdBQVcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFdkcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztRQUN6QyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3JDLENBQUM7OztZQXpDRCxTQUFTLFNBQUM7Z0JBQ1YsK0NBQStDO2dCQUMvQyxRQUFRLEVBQUUsTUFBTTtnQkFDaEIsUUFBUSxFQUFFLDJCQUEyQjthQUNyQzs7O1lBYjhCLFVBQVU7WUFBeEMsaUJBQWlCO1lBSVQsS0FBSyx1QkF1QlgsTUFBTSxTQUFDLEtBQUs7OzttQkFYYixLQUFLO29CQUdMLEtBQUs7cUJBR0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcblx0Q2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5qZWN0LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgSWNvbk5hbWVzRW51bSB9IGZyb20gJy4uLy4uL2VudW1zL2ljb24tbmFtZXMuZW51bSc7XHJcbmltcG9ydCB7IEljb25zIH0gZnJvbSAnLi4vLi4vcHJvdmlkZXJzL2ljb24ucHJvdmlkZXInO1xyXG5cclxuLyoqXHJcbiAqIEJvb3RzdHJhcCBpY29uIGNvbXBvbmVudC5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXHJcblx0c2VsZWN0b3I6ICdpLWJzJyxcclxuXHR0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4Qm9vdHN0cmFwSWNvbnNMaWJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG5cdC8qKiBJY29uIG5hbWUuICovXHJcblx0QElucHV0KCkgcHVibGljIG5hbWUhOiBzdHJpbmcgfCBJY29uTmFtZXNFbnVtO1xyXG5cclxuXHQvKiogSWNvbiB3aWR0aC4gKi9cclxuXHRASW5wdXQoKSBwdWJsaWMgd2lkdGghOiBzdHJpbmc7XHJcblxyXG5cdC8qKiBJY29uIGhlaWdodC4gKi9cclxuXHRASW5wdXQoKSBwdWJsaWMgaGVpZ2h0ITogc3RyaW5nO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHByaXZhdGUgX2VsZW06IEVsZW1lbnRSZWYsXHJcblx0XHRwcml2YXRlIF9jaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcblx0XHRASW5qZWN0KEljb25zKVxyXG5cdFx0cHJpdmF0ZSBfaWNvbnM6IEljb25zLFxyXG5cdCkgeyB9XHJcblxyXG5cdC8qKlxyXG5cdCAqIE9uQ2hhbmdlcyBldmVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBjaGFuZ2VzXHJcblx0ICovXHJcblx0cHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxyXG5cdFx0Y29uc3QgY2FtZWxjYXNlID0gcmVxdWlyZSgnY2FtZWxjYXNlJyk7XHJcblx0XHQvLyBpY29ucyBhcmUgcHJvdmlkZWQgYXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBiZWNhdXNlIG9mIFwibXVsdGk6IHRydWVcIlxyXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuXHRcdGNvbnN0IGljb25zID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uKHRoaXMuX2ljb25zIGFzIGFueSBhcyBvYmplY3RbXSkpO1xyXG5cdFx0bGV0IHN2ZyA9IGljb25zW2NhbWVsY2FzZShjaGFuZ2VzLm5hbWUuY3VycmVudFZhbHVlKV0gfHwgJyc7XHJcblxyXG5cdFx0aWYgKCFzdmcpIGNvbnNvbGUud2FybihgSWNvbiBub3QgZm91bmQ6ICR7Y2hhbmdlcy5uYW1lLmN1cnJlbnRWYWx1ZX1cXG5gKTtcclxuXHRcdGlmICh0aGlzLndpZHRoICYmIHN2Zy5pbmNsdWRlcygnd2lkdGgnKSkgc3ZnID0gc3ZnLnJlcGxhY2UoJ3dpZHRoPVwiMTZcIicsIGB3aWR0aD1cIiR7dGhpcy53aWR0aH1cImApO1xyXG5cdFx0aWYgKHRoaXMuaGVpZ2h0ICYmIHN2Zy5pbmNsdWRlcygnaGVpZ2h0JykpIHN2ZyA9IHN2Zy5yZXBsYWNlKCdoZWlnaHQ9XCIxNlwiJywgYGhlaWdodD1cIiR7dGhpcy5oZWlnaHR9XCJgKTtcclxuXHJcblx0XHR0aGlzLl9lbGVtLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gc3ZnO1xyXG5cdFx0dGhpcy5fY2hhbmdlRGV0ZWN0b3IubWFya0ZvckNoZWNrKCk7XHJcblx0fVxyXG59XHJcbiJdfQ==